#+TITLE: Ryan Woodard's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: lognoterefile


#org-confirm-elisp-link-function
#org-confirm-shell-link-function


We dearly thank [[http://sachachua.com][Sacha Chua]] for [[http://sachachua.com/dotemacs][this file]], vision and general great
stuff.  She is wonderful.

* Preamble

** Which machine, OS

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key [home] 'move-beginning-of-line)
  (global-set-key [end] 'move-end-of-line)
#+END_SRC

#+RESULTS:
| lambda | nil | (and (looking-at org-outline-regexp) (looking-back ^**)) |

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; check OS type
  (setq is-linux nil)
  (setq is-mac nil)
  (cond
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (message "Mac OS X")
      (setq is-mac t)))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (message "Linux")
      (setq is-linux t))))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; check emacs version
  (if (version< emacs-version "25.1")
      ((message "Old Emacs, YMMV")
       (kill-emacs))
    (message "Why not try 26.1?"))

#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp :tangle yes
  (message "Spinning up %s@%s using %s"
	   system-name
	   user-login-name
	   ;;user-emacs-directory
	   user-init-file)
#+END_SRC

** Readability

#+BEGIN_SRC emacs-lisp :tangle yes
   ;;  t for a termcap frame (a character-only terminal),
   ;; ‘x’ for an Emacs frame that is really an X window,
   ;; ‘w32’ for an Emacs frame that is a window on MS-Windows display,
   ;; ‘ns’ for an Emacs frame on a GNUstep or Macintosh Cocoa display,
#+END_SRC

All must be readable for when anything below crashes:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Readability counts.
  ;; `C-x C-+’ and ‘C-x C--’
  ;; C-x C-0 to reset.
  (when (eq is-linux t)
    ;; Readable font
    (when (eq window-system 'x)
      (set-face-attribute 'default nil :height 260)
      (add-to-list 'initial-frame-alist '(height . 55))
      (add-to-list 'initial-frame-alist '(width . 80))
      (add-to-list 'default-frame-alist '(height . 55))
      (add-to-list 'default-frame-alist '(width . 80))))

  (when (eq is-mac t)

    ;; Macbook built-in display.
    (when (eq window-system 'ns)
      ;; On Mac, use Command-t to bring up font menu.
      (set-face-attribute 'default nil :height 240)
      (add-to-list 'initial-frame-alist '(height . 33))
      (add-to-list 'initial-frame-alist '(width . 80))
      (add-to-list 'default-frame-alist '(height . 33))
      (add-to-list 'default-frame-alist '(width . 80))))
#+END_SRC

Note that all the =#+BEGIN_SRC= blocks are indented in this =.org=
file but not in the tangled =.el= output.  Monkey around with that
using =org-edit-src-content-indentation= and
=org-src-preserve-indentation=. 

** It's all about the org

For me, everything is now about ~org mode~ and, therefore, keeping the
bleeding edge development github version, so I'm following:

http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development

My only difference is ~$HOME/.emacs.d/elisp~ instead of ~$HOME/elisp~.
Therefore, I:

#+BEGIN_SRC sh
  sudo apt-get install emacs25-common-non-dfsg install-info \
       texi2html texinfo texinfo-doc-nonfree
  mkdir $HOME/.emacs.d/elisp && cd $HOME/.emacs.d/elisp
  git clone git://orgmode.org/org-mode.git
  cd org-mode && make
#+END_SRC

Need to point to where updated Info is.  Need to do shell env hack:

#+BEGIN_SRC sh
export INFOPATH=$HOME/.emacs.d/elisp/org-mode/doc:$INFOPATH
#+END_SRC

even though the following [[http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development][from here]] should work (it doesn't seem to):

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Info directory
  (setq Info-additional-directory-list
	(cons (expand-file-name "~/.emacs.d/elisp/org-mode/doc")
	      Info-default-directory-list))
#+END_SRC

To update occasionally:

#+BEGIN_SRC sh
  cd $HOME/elisp/org-mode && make up2
  git log  # to see what has changed
  git gc  # to clean things up, keep dir smaller
#+END_SRC

* Configuration

** About this file

See http://sachachua.com/dotemacs for Sacha's great explanations!
From that file:

#+BEGIN_QUOTE
My =~/.emacs.d/init.el= is now a symlink to =Sacha.el=, which is what
=M-x org-babel-tangle= (=C-c C-v t=) produces. *A note about Org
updates:* I like running Org Mode from checked-out source code instead
of package.el. I add the Lisp directories to my =load-path=, and I
also use the =:load-path= option in my first =use-package org= call to
set the load path. One of those is probably doing the trick and the
other one is redundant, but maybe it's a belt-and-suspenders sort of
thing. Using the git checkout also makes upgrading Org easy. All I
have to do is =git pull; make=, and stuff happens in an external Emacs
process. Since I create =Sacha.el= via =org-babel-tangle=, my Emacs
config can load =Sacha.el= without loading Org first.
#+END_QUOTE

** Starting up

Here's how we start:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This sets up the load path so that we can override it
  (package-initialize)

  ;; Override the packages with the git version of Org and other packages
  (add-to-list 'load-path "~/.emacs.d/elisp/org-mode/lisp")
  (add-to-list 'load-path "~/.emacs.d/elisp/org-mode/contrib/lisp")
  (setq package-enable-at-startup nil)
  (setq custom-file "~/.emacs.d/custom-settings.el")
  ;; (load custom-file t)
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Who am I?
  (setq user-full-name "Ryan Woodard")
  (when (eq user-login-name "ryan")
    (setq user-mail-address "ryan@timehaven.org"))
  (when (eq user-login-name 'rwoodard)
    (setq user-mail-address "rwoodard@appnexus.com"))
#+END_SRC

#+RESULTS:

** Emacs initialization

*** Add package sources

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Modern emacs packaging.
    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
      ;;(package-refresh-contents)
    )
    ;;       '(("GNU ELPA"     . "http://elpa.gnu.org/packages/")
    ;;         ("MELPA Stable" . "https://stable.melpa.org/packages/")
    ;;         ("MELPA"        . "https://melpa.org/packages/"))
    ;;       package-archive-priorities
    ;;       '(("MELPA Stable" . 0)
    ;;         ("GNU ELPA"     . 5)
    ;;         ("MELPA"        . 10)))
    ;; (when (not package-archive-contents)
    ;;   (package-refresh-contents))

#+END_SRC

Since it can take long and be annoying at start up, it's commented out
above.../but/ use =M-x package-refresh-contents= to reload the list of
packages after adding these for the first time.

*** Add my elisp directory and other files

Sometimes I load files outside the package system. As long as they're
in a directory in my =load-path=, Emacs can find them.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/elisp")

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

*** Load secrets

I keep slightly more sensitive information in a separate file so that
I can easily publish my main configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
  (load "~/.emacs.secrets" t)
#+END_SRC

** org

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :load-path "~/.emacs.d/elisp/org-mode/lisp")

(defun my/check-org ()
  (message (concat "org-version " org-version))
  (if (version< org-version "9.0")
      (progn
       (message "Old org.")
       (kill-emacs))
    (message "Why not try 9.1?")))

(my/check-org)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-use-speed-commands t)  ;; Way cool!
    ;; For example, to activate speed commands when the point is on any
    ;; star at the beginning of the headline, you can do this:
    (setq org-use-speed-commands
	    (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
  (my/check-org)
#+END_SRC

#+begin_src emacs-lisp :tangle yes
  (setq org-startup-with-inline-images t)
  (use-package org
    :load-path "~/.emacs.d/elisp/org-mode/lisp"
    :config
    (progn
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 ;; (dot . t)
	 ;;   (ditaa . t)
	 (emacs-lisp . t)
	 (ipython . t)
	 (sh . t)
	 ;; (sqlite . t)
	 ;; (http . t)
	 ;; (ledger . t)
	 (shell . t)
	 ;; (R . t)))
	 ))
    (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))))
    ;;:config

(my/check-org)

#+end_src

*** Frequently-accessed files
Registers allow you to jump to a file or other location quickly. To
jump to a register, use =C-x r j= followed by the letter of the
register. Using registers for all these file shortcuts is probably a
bit of a waste since I can easily define my own keymap, but since I
rarely go beyond register A anyway. Also, I might as well add
shortcuts for refiling.

#+BEGIN_SRC emacs-lisp :tangle yes



  (defvar my/refile-map (make-sparse-keymap))

  (defmacro my/defshortcut (key file)
    `(progn
       (set-register ,key (cons 'file ,file))
       (define-key my/refile-map
	 (char-to-string ,key)
	 (lambda (prefix)
           (interactive "p")
           (let ((org-refile-targets '(((,file) :maxlevel . 6)))
		 (current-prefix-arg (or current-prefix-arg '(4))))
             (call-interactively 'org-refile))))))

  (my/defshortcut ?a "~/org/2017_appnexus_projects.org")
  (my/defshortcut ?i "~/.emacs.d/ryan.org")
  (my/defshortcut ?p "~/stash/users/rwoodard/slopbucket/packratatat/packratatat.org")
  (my/defshortcut ?m "~/org/moe.org")
  ;; (my/defshortcut ?s "~/personal/sewing.org")
  ;; (my/defshortcut ?b "~/personal/business.org")
  ;; (my/defshortcut ?p "~/personal/google-inbox.org")
  ;; (my/defshortcut ?P "~/personal/google-ideas.org")
  ;; (my/defshortcut ?B "~/Dropbox/books")
  ;; (my/defshortcut ?e "~/code/emacs-notes/tasks.org")
  ;; (my/defshortcut ?w "~/Dropbox/public/sharing/index.org")
  ;; (my/defshortcut ?W "~/Dropbox/public/sharing/blog.org")
  ;; (my/defshortcut ?j "~/personal/journal.org")
  ;; (my/defshortcut ?I "~/Dropbox/Inbox")
  ;; (my/defshortcut ?g "~/sachac.github.io/evil-plans/index.org")
  ;; (my/defshortcut ?c "~/code/dev/elisp-course.org")
  ;; (my/defshortcut ?C "~/personal/calendar.org")
  ;; (my/defshortcut ?l "~/dropbox/public/sharing/learning.org")
  ;; (my/defshortcut ?q "~/personal/questions.org")
(my/check-org)
#+END_SRC

#+RESULTS:
| lambda | (prefix) | (interactive p) | (let ((org-refile-targets (quote (((~/stash/users/rwoodard/slopbucket/packratatat/packratatat.org) :maxlevel . 6)))) (current-prefix-arg (or current-prefix-arg (quote (4))))) (call-interactively (quote org-refile))) |

#+begin_src emacs-lisp :tangle yes
  (setq org-startup-with-inline-images t)
#+end_src

     # `org-refile-targets' for details.  If you would like to select a
     # location via a file-path-like completion along the outline path,
     # see the variables `org-refile-use-outline-path' and
     # `org-outline-path-complete-in-steps'.  If you would like to be
     # able to create new nodes as new parents for refiling on the fly,
     # check the variable `org-refile-allow-creating-parent-nodes'.  When
     # the variable `

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; capture & refile
  ;;
  ;; (require 'org)  ;; In init.el.
  (setq org-directory "~/org")
  (setq rw/stash-rw-dir "~/stash/users/rwoodard")

  (setq rw/slopbucket-dir (concat rw/stash-rw-dir "/" "slopbucket"))

  (setq rw/packratatat (concat rw/slopbucket-dir "/packratatat/packratatat.org"))

  (setq org-default-notes-file (concat org-directory "/" "an_capture.org"))
  (setq org-refile-use-outline-path 'file)

  (defun rw/paths-that-exist (paths)
    (delq nil
	  (mapcar (lambda (path) (and (file-exists-p path) path)) paths)))

  (defun rw/prepend-org-dir (paths)
    (mapcar (lambda (path) (concat org-directory "/" path)) paths)
    )

  (setq rw/org-refile-targets
	(rw/paths-that-exist
	 (rw/prepend-org-dir
	  '(
	    "projects.org"
	    "gtd.org"
	    "blah.org"	  
	    ))))
  (add-to-list 'rw/org-refile-targets (concat rw/slopbucket-dir "/packratatat/packratatat.org"))
  (add-to-list 'rw/org-refile-targets (concat org-directory "/moe.org"))

  (setq org-refile-targets '((rw/org-refile-targets . (:maxlevel . 6))))
  ;; Using #+STARTUP: lognoterefile  org-log-refile
#+END_SRC

#+RESULTS:
: ((rw/org-refile-targets :maxlevel . 6))

See Sacha's things to really get this down.

("'append" is for ipython, scimax stuff down below.)


*** Literate programming

Sacha doesn't want to get distracted by the same code in the other
window, so I want org src to use the current window.

#+begin_src emacs-lisp :tangle yes
  (setq org-src-window-setup 'current-window)
#+end_src

** More init
*** Magit - nice git interface

#+begin_src emacs-lisp :tangle yes
  (use-package magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (setq global-magit-file-mode t)
#+end_src

*** Mode line format

Display a more compact mode line

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smart-mode-line)
#+END_SRC

*** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice.

#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Minibuffer editing - more space!

Sometimes you want to be able to do fancy things with the text that
you're entering into the minibuffer. Sometimes you just want to be
able to read it, especially when it comes to lots of text.  This binds
=C-M-e= in a minibuffer) so that you can edit the contents of the
minibuffer before submitting it.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package miniedit
  :commands minibuffer-edit
  :init (miniedit-install))
#+END_SRC

*** Set up a light-on-dark color scheme

I like light on dark because I find it to be more restful. The
color-theme in ELPA was a little odd, though, so we define some advice
to make it work. Some things still aren't quite right.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defadvice color-theme-alist (around sacha activate)
  ;;   (if (ad-get-arg 0)
  ;;       ad-do-it
  ;;     nil))
  (use-package color-theme)
  (use-package color-theme-solarized)
  (defun my/setup-color-theme ()
    (interactive)
    (color-theme-solarized-dark)
    (set-face-foreground 'secondary-selection "darkblue")
    (set-face-background 'secondary-selection "lightblue")
    (set-face-background 'font-lock-doc-face "black")
    (set-face-foreground 'font-lock-doc-face "wheat")
    ;;(set-face-background 'font-lock-string-face "")
    ;;(set-face-background 'font-lock-string-face "black")
    (set-face-foreground 'org-todo "green")
    (set-face-background 'org-todo "black"))

  (eval-after-load 'color-theme (my/setup-color-theme))
#+END_SRC

I sometimes need to switch to a lighter background for screenshots.
For that, I use =color-theme-vim=.

Some more tweaks to solarized:

#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (custom-set-faces
     '(erc-input-face ((t (:foreground "antique white"))))
     '(helm-selection ((t (:background "ForestGreen" :foreground "black"))))
     '(org-agenda-clocking ((t (:inherit secondary-selection :foreground "black"))) t)
     '(org-agenda-done ((t (:foreground "dim gray" :strike-through nil))))
     '(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
     '(org-clock-overlay ((t (:background "SkyBlue4" :foreground "black"))))
     '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon" :strike-through t))))
     '(outline-1 ((t (:inherit font-lock-function-name-face :foreground "cornflower blue"))))))
#+END_SRC

*** Some old favorite keys of mine (rw)

Add to 

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-after-load 'org
  '(define-key org-src-mode-map (kbd "S-<f12>") 'org-edit-src-exit))
  (eval-after-load 'org
  '(define-key org-mode-map (kbd "S-<f12>") 'org-edit-special))
  (eval-after-load 'org
  '(define-key org-mode-map (kbd "<f12>") 'org-ctrl-c-ctrl-c))
#+END_SRC

#+RESULTS:
: org-ctrl-c-ctrl-c
    
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "<f12>") 'eval-last-sexp)
#+END_SRC

For historical reasons, until I change it:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; My stuff.
  ;; Function keys
  (add-to-list 'load-path "~/.emacs.d/rw")
  ;; (load-library "rw_funcs")
  (load-library "rw_keys")
#+END_SRC

*** Bells and whistles, and menus

Especially on Mac, audible bell is *annoying*!

#+BEGIN_SRC emacs-lisp :tangle yes
  (tool-bar-mode -1)
  (setq visible-bell t)
  (column-number-mode 1)
#+END_SRC

#+RESULTS:
: t

* Copy as format:  copy emacs to Slack/Stash/etc.
(global-set-key (kbd "C-c w s") 'copy-as-format-slack)
(global-set-key (kbd "C-c w g") 'copy-as-format-github)
* Just trying things out

** Unfill paragraph
#+BEGIN_SRC emacs-lisp :tangle yes
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
    (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))
#+END_SRC

#+RESULTS:
: unfill-paragraph

** org mode structure templates (=<s= things)

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-structure-template-alist
	'(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
          ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
          ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
	  ("p" "#+BEGIN_SRC ipython\n?\n#+END_SRC" "<src lang=\"ipython\">\n?\n</src>")
          ;;("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
          ("l" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
          ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+html: " "<literal style=\"html\">?</literal>")
          ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII")
          ("A" "#+ascii: ")
          ("i" "#+index: ?" "#+index: ?")
          ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Sacha says: "Since Helm can be a little complex, you may want to
  ;; start with ido-mode instead."
  (ido-mode 1)
#+END_SRC

* Make sure source code packages (org) have latest Info

Need to do this again because =magit= (from =elpa=) overwrites
previous attempt at this. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq Info-directory-list
	(cons (expand-file-name "~/.emacs.d/elisp/org-mode/doc")
	      Info-directory-list))
#+END_SRC
* Python

#+BEGIN_SRC sh
  cd ~/.emacs.d/elisp
  git clone https://github.com/jkitchin/scimax.git
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes


  ;; Standard Jedi.el setting
  ;; (use-package jedi)
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot t)

  ;; Type:
  ;;     M-x package-install RET jedi RET
  ;;     M-x jedi:install-server RET
  ;; Then open Python file.

  (use-package elpy)
  (elpy-enable)

  ;; (setq elpy-rpc-backend "jedi")  

  (require 'ob-ipython)

  ;; Use conda env in shell from which Emacs was started!
  ;;(setq ob-ipython-command "~/local/miniconda3/envs/py27/bin/jupyter")

  ;; see org-babel stuff for ipython in Org section above

  ;; http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/#disqus_thread
  ;; Intermittent silliness!
  ;;(require 'cl-lib)  ;; Might be needed with 'loop' error.
  (add-to-list 'load-path "~/.emacs.d/elisp/scimax")
  (require 'scimax-org-babel-ipython)
#+END_SRC

#+RESULTS:
: scimax-org-babel-ipython


#+BEGIN_SRC ipython :session
  print("hi there, sir")
  print
#+END_SRC

#+RESULTS:
:RESULTS:
hi there, sir
:END:

* helm
#+BEGIN_SRC emacs-lisp :tangle yes

  (add-to-list 'load-path (file-name-directory (file-truename "/home/ryan/.emacs.d/elpa/helm-20170425.2201/emacs-helm.sh")))
  ;; (setq default-frame-alist '((vertical-scroll-bars . nil)
  ;;                             (tool-bar-lines . 0)
  ;;                             (menu-bar-lines . 0)
  ;;                             (fullscreen . nil)))
  (unless (member "helm.el" (directory-files default-directory))
    (setq package-load-list '((helm-core t) (helm t) (async t) (popup t)))
    (package-initialize))
  (blink-cursor-mode 1)
  (require 'helm-config)
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (unless (boundp 'completion-in-region-function)
    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))


    (use-package helm
      :diminish helm-mode
      :init
      (progn
        (require 'helm-config)
        (setq helm-candidate-number-limit 100)
        ;; From https://gist.github.com/antifuchs/9238468
        (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
              helm-input-idle-delay 0.01  ; this actually updates things
                                            ; reeeelatively quickly.
              helm-yas-display-key-on-candidate t
              helm-quick-update t
              helm-M-x-requires-pattern nil
              helm-ff-skip-boring-files t)
        (helm-mode))
      :bind (("C-c h" . helm-mini)
             ("C-h a" . helm-apropos)
             ("C-x C-b" . helm-buffers-list)
             ("C-x b" . helm-buffers-list)
             ("M-y" . helm-show-kill-ring)
             ("M-x" . helm-M-x)
             ("C-x c o" . helm-occur)
             ("C-x c s" . helm-swoop)
             ("C-x c y" . helm-yas-complete)
             ("C-x c Y" . helm-yas-create-snippet-on-region)
             ("C-x c b" . my/helm-do-grep-book-notes)
             ("C-x c SPC" . helm-all-mark-rings)))
    (ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

    ;; (use-package helm-org-rifle)

#+END_SRC

#+RESULTS:

Great for describing bindings. I'll replace the binding for =where-is= too.

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package helm-descbinds
;;   :defer t
;;   :bind (("C-h b" . helm-descbinds)
;;          ("C-h w" . helm-descbinds)))
#+END_SRC

#+RESULTS:

* Final org check
#+BEGIN_SRC emacs-lisp :tangle yes
(my/check-org)
#+END_SRC
