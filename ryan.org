#+TITLE: Ryan Woodard's Emacs configuration
#+OPTIONS: toc:4 h:4

We dearly thank [[http://sachachua.com][Sacha Chua]] for [[http://sachachua.com/dotemacs][this file]], vision and general great
stuff.  She is wonderful.

* Preamble
** Readability

All must be readable for when anything below crashes:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Readability counts.
  ;; `C-x C-+’ and ‘C-x C--’
  ;; C-x C-0 to reset.
  (when (eq system-type 'gnu/linux)
    ;; Readable font
    (set-face-attribute 'default nil :height 260)
    )
  (when (eq system-type 'darwin)
    ;; On Mac, use Command-t to bring up font menu.
    (set-face-attribute 'default nil :height 240)
    )
  (add-to-list 'initial-frame-alist '(height . 55))
  (add-to-list 'initial-frame-alist '(width . 80))
  (add-to-list 'default-frame-alist '(height . 55))
  (add-to-list 'default-frame-alist '(width . 80))
#+END_SRC

Note that all the =#+BEGIN_SRC= blocks are indented in this =.org=
file but not in the tangled =.el= output.  Monkey around with that
using =org-edit-src-content-indentation= and
=org-src-preserve-indentation=. 

** It's all about the org

For me, everything is now about ~org mode~ and, therefore, keeping the
bleeding edge development github version, so I'm following:

http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development

My only difference is ~$HOME/.emacs.d/elisp~ instead of ~$HOME/elisp~.
Therefore, I:

#+BEGIN_SRC sh
  sudo apt-get install emacs25-common-non-dfsg install-info \
       texi2html texinfo texinfo-doc-nonfree
  mkdir $HOME/.emacs.d/elisp && cd $HOME/.emacs.d/elisp
  git clone git://orgmode.org/org-mode.git
  cd org-mode && make
#+END_SRC

Need to point to where updated Info is.  Need to do shell env hack:

#+BEGIN_SRC sh
export INFOPATH=$HOME/.emacs.d/elisp/org-mode/doc:$INFOPATH
#+END_SRC

even though the following [[http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development][from here]] should work (it doesn't seem to):

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Info directory

  (setq Info-additional-directory-list
	(cons (expand-file-name "~/.emacs.d/elisp/org-mode/doc")
	      Info-default-directory-list))
#+END_SRC

To update occasionally:

#+BEGIN_SRC sh
  cd $HOME/elisp/org-mode && make up2
  git log  # to see what has changed
  git gc  # to clean things up, keep dir smaller
#+END_SRC

* Configuration
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
<<babel-init>>

See http://sachachua.com/dotemacs for Sacha's great explanations!
From that file:

#+BEGIN_QUOTE
My =~/.emacs.d/init.el= is now a symlink to =Sacha.el=, which is what
=M-x org-babel-tangle= (=C-c C-v t=) produces. *A note about Org
updates:* I like running Org Mode from checked-out source code instead
of package.el. I add the Lisp directories to my =load-path=, and I
also use the =:load-path= option in my first =use-package org= call to
set the load path. One of those is probably doing the trick and the
other one is redundant, but maybe it's a belt-and-suspenders sort of
thing. Using the git checkout also makes upgrading Org easy. All I
have to do is =git pull; make=, and stuff happens in an external Emacs
process. Since I create =Sacha.el= via =org-babel-tangle=, my Emacs
config can load =Sacha.el= without loading Org first.
#+END_QUOTE

** Starting up

Here's how we start:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This sets up the load path so that we can override it
  (package-initialize)

  ;; Override the packages with the git version of Org and other packages
  (add-to-list 'load-path "~/.emacs.d/elisp/org-mode/lisp")
  (add-to-list 'load-path "~/.emacs.d/elisp/org-mode/contrib/lisp")
  (setq package-enable-at-startup nil)
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Who am I?
  (setq user-full-name "Ryan Woodard"
        user-mail-address "ryan@timehaven.org")
#+END_SRC

** Emacs initialization
*** Add package sources

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Modern emacs packaging.
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    ;;(package-refresh-contents)
  )

  ;; (setq package-archives
  ;;       '(("GNU ELPA"     . "http://elpa.gnu.org/packages/")
  ;;         ("MELPA Stable" . "https://stable.melpa.org/packages/")
  ;;         ("MELPA"        . "https://melpa.org/packages/"))
  ;;       package-archive-priorities
  ;;       '(("MELPA Stable" . 0)
  ;;         ("GNU ELPA"     . 5)
  ;;         ("MELPA"        . 10)))
  ;; (when (not package-archive-contents)
  ;;   (package-refresh-contents))

#+END_SRC

Since it can take long and be annoying at start up, it's commented out
above.../but/ use =M-x package-refresh-contents= to reload the list of
packages after adding these for the first time.

*** Add my elisp directory and other files

Sometimes I load files outside the package system. As long as they're
in a directory in my =load-path=, Emacs can find them.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/elisp")

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

*** Load secrets

I keep slightly more sensitive information in a separate file so that
I can easily publish my main configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
  (load "~/.emacs.secrets" t)
#+END_SRC

*** Magit - nice git interface
#+begin_src emacs-lisp :tangle yes
  (use-package magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (setq global-magit-file-mode t)
#+end_src
*** Set up a light-on-dark color scheme

I like light on dark because I find it to be more restful. The
color-theme in ELPA was a little odd, though, so we define some advice
to make it work. Some things still aren't quite right.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defadvice color-theme-alist (around sacha activate)
  ;;   (if (ad-get-arg 0)
  ;;       ad-do-it
  ;;     nil))
  (use-package color-theme)
  (use-package color-theme-solarized)
  (defun my/setup-color-theme ()
    (interactive)
    (color-theme-solarized-dark)
    (set-face-foreground 'secondary-selection "darkblue")
    (set-face-background 'secondary-selection "lightblue")
    (set-face-background 'font-lock-doc-face "black")
    (set-face-foreground 'font-lock-doc-face "wheat")
    (set-face-background 'font-lock-string-face "black")
    (set-face-foreground 'org-todo "green")
    (set-face-background 'org-todo "black"))

  (eval-after-load 'color-theme (my/setup-color-theme))
#+END_SRC

#+RESULTS:

I sometimes need to switch to a lighter background for screenshots.
For that, I use =color-theme-vim=.

Some more tweaks to solarized:
#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (custom-set-faces
     '(erc-input-face ((t (:foreground "antique white"))))
     '(helm-selection ((t (:background "ForestGreen" :foreground "black"))))
     '(org-agenda-clocking ((t (:inherit secondary-selection :foreground "black"))) t)
     '(org-agenda-done ((t (:foreground "dim gray" :strike-through nil))))
     '(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
     '(org-clock-overlay ((t (:background "SkyBlue4" :foreground "black"))))
     '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon" :strike-through t))))
     '(outline-1 ((t (:inherit font-lock-function-name-face :foreground "cornflower blue"))))))
#+END_SRC

*** Some old favorite keys of mine (rw)
 For historical reasons, until I change it:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; My stuff.
  ;; Function keys
  (add-to-list 'load-path "~/.emacs.d/rw")
  ;; (load-library "rw_funcs")
  (load-library "rw_keys")
#+END_SRC
*** Bells and whistles, and menus
Especially on Mac, audible bell is *annoying*!
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq visible-bell t)
#+END_SRC
