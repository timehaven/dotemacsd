* Colors
** solarized-theme
#+BEGIN_SRC emacs-lisp :tangle yes
;; Two versions out there, I'm trying this one:
;; https://github.com/bbatsov/solarized-emacs
;; Also available is
;; https://github.com/sellout/emacs-color-theme-solarized
(load-theme 'solarized-light)
#+END_SRC
** material
#+BEGIN_SRC emacs-lisp :tangle no
  ;; https://emacs.stackexchange.com/questions/28940/how-to-overwrite-properly-a-face-for-a-particular-theme
  (use-package material-theme
    :ensure t
    :config
    (progn
      ;; (load-theme 'material-light t)
      (defvar after-load-theme-hook nil
        "Hook run after a color theme is loaded using `load-theme'.")
      (defadvice load-theme (after run-after-load-theme-hook activate)
        "Run `after-load-theme-hook'."
        (run-hooks 'after-load-theme-hook))
      (defun customize-material ()
        "Customize material theme"
        (let ((class '((class color) (min-colors 89)))
              (header-color (if (or window-system truecolor) "#455A64" "#5f5f5f")))
          (if (member 'material custom-enabled-themes)
               (custom-theme-set-faces
                'material

                ;; ~/.emacs.d/elpa/material-theme-20160908.1538/material-theme.el
                '(org-block ((t (:foreground "#F8F8F0" :background "#171717"))))
                `(org-level-1 ((,class (:inherit outline-1))))
                `(org-level-2 ((,class (:inherit outline-2))))
                `(org-level-3 ((,class (:inherit outline-3))))
                `(org-level-4 ((,class (:inherit outline-4))))

                ))))
        (add-hook 'after-load-theme-hook 'customize-material)
        (load-theme 'material t)))


  ;; (use-package monokai-theme
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (defvar after-load-theme-hook nil
  ;;       "Hook run after a color theme is loaded using `load-theme'.")
  ;;     (defadvice load-theme (after run-after-load-theme-hook activate)
  ;;       "Run `after-load-theme-hook'."
  ;;       (run-hooks 'after-load-theme-hook))
  ;;     (defun customize-monokai ()
  ;;       "Customize monokai theme"
  ;;       (if (member 'monokai custom-enabled-themes)
  ;;           (custom-theme-set-faces
  ;;            'monokai
  ;;            '(org-block ((t (:foreground "#F8F8F0" :background "#171717")))))))
  ;;     (add-hook 'after-load-theme-hook 'customize-monokai)))



    ;; (with-eval-after-load "ample-theme"
    ;;   (custom-theme-set-faces
    ;;    'ample
    ;;    '(default ((t (:foreground "#bdbdb3" :background "gray15"))))
    ;;    '(font-lock-keyword-face ((t (:foreground "#818053"))))))

    ;; Things I might want to change:
       ;; `(org-block ((,class (:foreground ,green :background ,far-background))))
       ;; `(org-block-background ((,t (:background ,far-background))))
       ;; `(org-level-1 ((,class (:inherit outline-1
       ;;                       :background ,header-color
       ;;                       :weight bold
       ;;                       :box (:style released-button)
       ;;                       :height 1.3))))
       ;; `(org-level-2 ((,class (:inherit outline-2
       ;;                                :background ,"#35575b"
       ;;                                :box (:style released-button)
       ;;                       :height 1.2))))
       ;; `(org-level-3 ((,class (:inherit outline-3 :height 1.1))))
       ;; `(org-level-4 ((,class (:inherit outline-4 :height 1.0))))
#+END_SRC

#+RESULTS:
: t

** Sacha solarized
Sacha says:

#+BEGIN_QUOTE :tangle yes
Set up a light-on-dark color scheme.  I like light on dark because I
find it to be more restful. The color-theme in ELPA was a little odd,
though, so we define some advice to make it work. Some things still
aren't quite right.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (defadvice color-theme-alist (around sacha activate)
  ;;   (if (ad-get-arg 0)
  ;;       ad-do-it
  ;;     nil))
  (message "***** use-package color-theme and solarized *****")
  (use-package color-theme
    :ensure t)
  (use-package color-theme-solarized
    :ensure t)
  (defun my/setup-color-theme ()
    (interactive)
    (color-theme-solarized-dark)
    ;; (set-face-foreground 'secondary-selection "darkblue")
    ;; (set-face-background 'secondary-selection "lightblue")
    ;; (set-face-background 'font-lock-doc-face "black")
    ;; (set-face-foreground 'font-lock-doc-face "wheat")
    ;; (set-face-background 'font-lock-string-face "")
    ;; (set-face-background 'font-lock-string-face "black")
    ;; (set-face-foreground 'org-todo "green")
    ;; (set-face-background 'org-todo "black")
    )
  (eval-after-load 'color-theme (my/setup-color-theme))
#+END_SRC

#+BEGIN_QUOTE :tangle no
I sometimes need to switch to a lighter background for screenshots.
For that, I use =color-theme-vim=.

Some more tweaks to solarized:
#+END_QUOTE

NOTE:  not tangled!

#+BEGIN_SRC emacs-lisp :tangle no
  (when window-system
    (custom-set-faces
     '(erc-input-face ((t (:foreground "antique white"))))
     '(helm-selection ((t (:background "ForestGreen" :foreground "black"))))
     '(org-agenda-clocking ((t (:inherit secondary-selection :foreground "black"))) t)
     '(org-agenda-done ((t (:foreground "dim gray" :strike-through nil))))
     '(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
     '(org-clock-overlay ((t (:background "SkyBlue4" :foreground "black"))))
     '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon" :strike-through t))))
     '(outline-1 ((t (:inherit font-lock-function-name-face :foreground "cornflower blue"))))))
#+END_SRC
** org block faces
Testing these with kaolin theme...need work.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-block-faces '(("emacs-lisp" (:background "#363636"))
			      ("ipython" (:background "#363636"))
			      ("python" (:background "#363636"))))
#+END_SRC

** kaolin
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package kaolin-theme 
    :ensure t)
  ;;(color-theme-kaolin)
#+END_SRC

