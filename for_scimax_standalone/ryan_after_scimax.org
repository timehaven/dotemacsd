* Helpful things (but no commands issued)

** src blocks: ~org-hide-block-all~, ~org-show-block-all~

* OS, Emacs version, default face/frame, whoami

** OS

#+BEGIN_SRC emacs-lisp :tangle yes
;; check OS type
(setq is-linux nil)
(setq is-mac nil)
(cond
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (message "Mac OS X")
    (setq is-mac t)))
 ((string-equal system-type "gnu/linux") ; linux
  (progn
    (message "Linux")
    (setq is-linux t))))
#+END_SRC

#+RESULTS:
: t

** Emacs version

#+BEGIN_SRC emacs-lisp :tangle yes
;; check emacs version
(if (version< emacs-version "25.1")
    ((message "Old Emacs, YMMV")
     (kill-emacs))
  (message "Why not try 26.1?"))

(message "Spinning up %s@%s using %s"
	 system-name
	 user-login-name
	 ;;user-emacs-directory
	 user-init-file)
#+END_SRC

#+RESULTS:
: Spinning up rwoodard@rwoodard using nil

** default face/frame

#+BEGIN_SRC emacs-lisp :tangle yes
;;  t for a termcap frame (a character-only terminal),
;; ‘x’ for an Emacs frame that is really an X window,
;; ‘w32’ for an Emacs frame that is a window on MS-Windows display,
;; ‘ns’ for an Emacs frame on a GNUstep or Macintosh Cocoa display,

;; Readability counts.
;; `C-x C-+’ and ‘C-x C--’
;; C-x C-0 to reset.
(when (eq is-linux t)
  ;; Readable font
  (when (eq window-system 'x)
    (set-face-attribute 'default nil :height 200)
    (add-to-list 'initial-frame-alist '(height . 40))
    (add-to-list 'initial-frame-alist '(width . 80))
    (add-to-list 'default-frame-alist '(height . 40))
    (add-to-list 'default-frame-alist '(width . 80))))

(when (eq is-mac t)

  ;; Macbook built-in display.
  (when (eq window-system 'ns)
    ;; On Mac, use Command-t to bring up font menu.
    (set-face-attribute 'default nil :height 180)
    ;;(set-face-attribute 'default nil :height 220)
    ;;(set-face-attribute 'default nil :height 240)
    (add-to-list 'initial-frame-alist '(height . 33))
    (add-to-list 'initial-frame-alist '(width . 80))
    (add-to-list 'default-frame-alist '(height . 33))
    (add-to-list 'default-frame-alist '(width . 80))))
#+END_SRC

#+RESULTS:
: ((width . 80) (height . 33))

** whoami

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Ryan Woodard")
(when (eq user-login-name "ryan")
  (setq user-mail-address "ryan@timehaven.org"))
(when (eq user-login-name "rwoodard")
  (setq user-mail-address "rwoodard@appnexus.com"))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of OS, Emacs version, default face/frame, whoami!")
#+END_SRC
* My funky functions

#+BEGIN_SRC emacs-lisp :tangle yes
;; https://emacs.stackexchange.com/questions/7211/collapse-src-blocks-in-org-mode-by-default
(defvar org-blocks-hidden nil)
(defun org-toggle-blocks ()
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))
(add-hook 'org-mode-hook 'org-toggle-blocks)
(define-key org-mode-map (kbd "C-c t") 'org-toggle-blocks)


(defun my/sh-send-line-or-region (&optional step)

  (interactive ())

  (let

      ((proc my/target-proc)
       pbuff min max command)

    (setq pbuff (process-buffer proc))

    (if (use-region-p)
	(setq min (region-beginning)
	      max (region-end))
      (setq min (point-at-bol)
	    max (point-at-eol)))

    (setq command (concat (buffer-substring min max) "\n"))

    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ;;(move-marker (process-mark proc) (end-of-buffer))
      )	;;pop-to-buffer does not work with save-current-buffer -- bug?

    (process-send-string proc command)
    ;;(comint-send-string proc command)

    ;;(display-buffer (process-buffer proc) t)

    (when step
      (goto-char max)
      ;;(goto-char (point-max))
      (next-line))
    )
  )


(defun my/sh-send-line-or-region-2 (&optional step)

  (interactive ())

  (let

      ((proc my/target-proc)
       pbuf min max command)

    (setq pbuff (process-buffer proc))

    (if (use-region-p)
	(setq min (region-beginning)
	      max (region-end))
      (setq min (point-at-bol)
	    max (point-at-eol)))

    (setq command (concat (buffer-substring min max) "\n"))
    (message command)

    ;; (with-current-buffer pbuff
    ;;   (goto-char (process-mark proc))
    ;;   (insert command)
    ;;   (move-marker (process-mark proc) (point))
    ;;   ;(move-marker (process-mark proc) (end-of-buffer))
    ;;   )  ;;pop-to-buffer does not work with save-current-buffer -- bug?

    ;; Would be cool locally but cannot send across network, as the
    ;; following function wants to create a temp file in
    ;; /var/folders/blah..., which is trying to do so ~locally~ but
    ;; is needed remotely!  So back to one line at a time.
    (python-shell-send-string command proc)

    ;;(process-send-string proc "%cpaste\n")
    ;;(process-send-string proc command)
    ;;(comint-send-string proc command)

    ;;(display-buffer (process-buffer proc) t)

    (when step
      ;;(goto-char max)
      (goto-char (point-max))
      (next-line))
    )
  )


(defun my/org-babel-src-block-lang ()
  (interactive)
  (let ((src (org-element-context)))
    (org-element-property :language src)))


(defun my/org-babel-send-line-of-src-block ()
  (interactive)
  (let ((my/lang (my/org-babel-src-block-lang)))

    (when (equal my/lang "sh")
      (my/sh-send-line-or-region))

    (when (equal my/lang "emacs-lisp")
      (my/eval-line 'eval-region))

    (when (equal my/lang "ipython")
      (my/python-shell-send-line-or-region))

    ))


(defun move-to-end-of-src-block-and-results-plus-line ()
  "Do what the name says."

  ;; Define type of, start and end of block.
  ;; Declare that location will be used.
  (let* ((src (org-element-context))
	 (start (org-element-property :begin src))
	 (end (org-element-property :end src))
	 location)

    (goto-char start)

    ;; Set location to be beginning of results: section, if there is
    ;; one, otherwise nil.
    (setq location (org-babel-where-is-src-block-result nil nil))

    (if (not location)

	;; If there is *not* a results: section, go to end of current
	;; src block.
	(goto-char end)

      ;; If there is a results: section, go to the beginning of it.
      (goto-char location)

      ;; Now go to end of that results: section.
      (goto-char (org-element-property :end (org-element-context))))

    ;; Two blank lines after end.
    ;;(insert "blah\n\nblah")

    ) ;; let
  )


(defun insert-block-same-as-current (el)
  "docstring"
  (let* ((language (org-element-property :language el))
	 (parameters (org-element-property :parameters el)))
    (beginning-of-line)
    (insert (format "#+BEGIN_SRC %s %s

    ,#+" "END_SRC\n\n" language parameters)))
  (previous-line)
  (previous-line)
  (previous-line)
  )


(defun move-and-insert-new-block (below)
  "Do two things with one call."
  ;; Find out if we need to go up or down.

  (let* ((el (org-element-context)))

    (if below

	(move-to-end-of-src-block-and-results-plus-line)

      (org-babel-goto-src-block-head)

      ) ;; if below

    (insert-block-same-as-current el)
    )
  )


(defun insert-new-block-same-as-current (&optional below)
  "Insert a src block above the current point.
	      With prefix arg BELOW, insert it below the current point."

  (interactive "P")

  (cond

   ((org-in-src-block-p)

    ;; If we are in a src block, do this stuff.
    (move-and-insert-new-block below))

   ) ;; cond

  ) ;; defun


(defun insert-new-block-same-as-current-below ()
  (interactive)
  (insert-new-block-same-as-current t))


(defun select-current-line ()
  "Select the current line"
  (interactive)
  (end-of-line) ; move to end of line
  (set-mark (line-beginning-position)))


(defun my/python-shell-send-line-or-region ()
  "docstring"
  (interactive)
  (if (use-region-p)
      (python-shell-send-region	;; This function is built-in to python-mode.
       (region-beginning) (region-end))
    ;; else
    (python-shell-send-region
     (line-beginning-position) (line-end-position))))


;;
;; from
;; https://emacs.stackexchange.com/questions/24190/send-orgmode-sh-babel-block-to-eshell-term-in-emacs
;; needs
;; https://github.com/metaperl/shell-current-directory/blob/master/shell-current-directory.el
;;

;; (use-package shell-current-directory
;;   :bind ("M-S" . shell-current-directory)
;;   :config (load-file (expand-file-name "shell.el"
;;				       user-emacs-directory)))


;; (defun kdm/sh-send-line-or-region ()
;;   (interactive)
;;   (if (use-region-p)
;;       (append-to-buffer (get-buffer (directory-shell-buffer-name)) (mark)(point))
;;     (let (p1 p2)
;;       (setq p1 (line-beginning-position))
;;       (setq p2 (line-end-position))
;;       (append-to-buffer (get-buffer (directory-shell-buffer-name)) p1 p2)
;;       ))
;;   (let (b)
;;     (setq b (get-buffer (current-buffer)))
;;     (switch-to-buffer-other-window (get-buffer (directory-shell-buffer-name)))
;;     (execute-kbd-macro "\C-m")
;;     (switch-to-buffer-other-window b)
;;     )
;;   )

;; (global-set-key "\M-s" 'kdm/sh-send-line-or-region)
#+END_SRC

#+RESULTS:
: my/python-shell-send-line-or-region

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of my funky functions!")
#+END_SRC
* My key bindings

#+BEGIN_SRC emacs-lisp :tangle yes
;; See examples at bottom of this file of ways to set keys.

;; Global.

(global-set-key [end]
		'move-end-of-line)
(global-set-key [home]
		'move-beginning-of-line)
(global-set-key (kbd "s-s")
		'isearch-forward)  ;; Mac command key
(global-set-key (kbd "s-r")
		'isearch-backward)  ;; Mac command key

(add-hook 'isearch-mode-hook
	  (lambda ()

	    (define-key isearch-mode-map (kbd "s-s")
	      'isearch-repeat-forward)
	    (define-key isearch-mode-map (kbd "s-r")
	      'isearch-repeat-backward)
	    ))

;; Make only one window.
(global-set-key [f1]
		'delete-other-windows)

;; Make this window go away.
(global-set-key [S-f1]
		'delete-window)

;; Go to table of key bindings.
(global-set-key [M-f1]
		(lambda ()
		  (interactive)
		  (bookmark-jump "keys")
		  (recenter-top-bottom 1)))

;; Split window in half (top and bottom).
(global-set-key [f2]
		(lambda ()
		  (interactive)
		  (split-window-vertically)
		  (other-window 1)))

;; Split window in half (left and right).
(global-set-key [S-f2]
		(lambda ()
		  (interactive)
		  (split-window-horizontally)
		  (other-window 1)))

;; Bury buffer.
(global-set-key [f3]
		'bury-buffer)

;; Kill buffer (require two key presses since it's a kill).
(global-set-key [S-f3]
		'kill-buffer)

;; Set target buffer for sending commands to
(defun my/set-target-buffer ()
  "Tag as target buffer for shell commands"
  (interactive)
  (setq my/target-proc (get-buffer-process (current-buffer)))
  (message (concat "New my/target-proc is " (buffer-name)))
  )
(global-set-key [C-S-f4] 'my/set-target-buffer)
(global-set-key [M-s-f4] 'my/sh-send-line-or-region)

;; Switch to most recent buffer.
(global-set-key [f5]
		(lambda ()
		  (interactive)
		  (switch-to-buffer nil)))

;; JFGI
(global-set-key [S-f5]
		'browse-url)

;; Go to next window.
(global-set-key [f6]
		(lambda ()
		  (interactive)
		  (other-window 1)))

;; Go to previous window.
(global-set-key [S-f6]
		(lambda ()
		  (interactive)
		  (other-window -1)))

;; helm version of buffers.
(global-set-key [f8]
		'helm-mini)

;; speedbar
(global-set-key [S-f8]
		'sr-speedbar-toggle)

;; menu that a mouse would find.
(global-set-key [M-f8]
		'tmm-menubar)

;; Info!
(global-set-key [C-f8]
		'info)

;; Top and bottom of buffer.
(global-set-key [S-f9]
		'beginning-of-buffer)

(global-set-key [S-f10]
		(lambda ()
		  (interactive)
		  (goto-char (point-max))))

(global-set-key [S-f11]
		'helm-find-files)

(global-set-key [f11]
		'save-buffer)

(global-set-key [C-f12]
		'eval-last-sexp)

;; temp place for one-off keyboard macros, for now
;; (global-set-key [f14]
;;                 'akmtdfgen)

(add-hook 'org-mode-hook
	  (lambda ()

	    (define-key org-mode-map [M-f3]
	      'org-babel-remove-result-one-or-many)

	    ;; Remove all results in buffer...dangerous!  But can undo!
	    (define-key org-mode-map [C-f3]
	      (lambda ()
		(interactive)
		(org-babel-remove-result-one-or-many t)))

	    (define-key org-mode-map [f4]
	      'org-ctrl-c-ctrl-c)

	    (define-key org-mode-map [f9]
	      (lambda ()
		(interactive)
		(org-previous-block nil)
		;; (org-show-block-all)
		(outline-show-all)))

	    (define-key org-mode-map [f10]
	      (lambda ()
		(interactive)
		(org-next-block nil)
		;; (org-show-block-all)
		(outline-show-all)))

	    ;; Toggle hide of all results.
	    (define-key org-mode-map [S-f9]
	      'org-babel-hide-result-toggle)

	    ;; Go to results section of current block.
	    (define-key org-mode-map [S-f10]
	      (lambda ()
		(interactive)
		(let ((location (org-babel-where-is-src-block-result)))
		  (when location
		    (goto-char location)))))

	    ;; (define-key org-mode-map [M-f9]
	    ;;   'insert-new-block-same-as-current)

	    ;; insert src block above
	    (define-key org-mode-map [M-f9]
	      (lambda ()
		(interactive)
		(org-babel-insert-block)))

	    (define-key org-mode-map [C-f9]
	      'org-show-block-all)

	    (define-key org-mode-map [C-f10]
	      'org-hide-block-all)

	    (define-key org-mode-map [C-S-f9]
	      'outline-show-all)

	    (define-key org-mode-map [C-S-f10]
	      'outline-hide-body)

	    ;; insert src block below
	    (define-key org-mode-map [M-f10]
	      (lambda ()
		(interactive)
		(org-babel-insert-block t)))

	    ;; (define-key org-mode-map [M-f10]
	    ;;   'insert-new-block-same-as-current-below)

	    (define-key org-mode-map [S-f4]
	      (lambda ()
		(interactive)
		(org-ctrl-c-ctrl-c)
		(org-next-block)))

	    (define-key org-mode-map [M-f4]
	      (lambda ()
		(interactive)
		(org-ctrl-c-ctrl-c)
		(insert-new-block-same-as-current-below)))


	    ;; (define-key org-mode-map [f12]
	    ;;   'my/org-babel-send-line-of-src-block)

	    (define-key org-mode-map [f12]
	      (lambda ()
		(interactive)
		(org-fill-paragraph)
		(save-buffer)
		(org-html-export-to-html)))

	    (define-key org-mode-map [M-f12]
	      'org-edit-special)

	    ))


(add-hook 'org-src-mode-hook
	  (lambda ()

	    ;; C-c C-c, standard Python mode, no elpy
	    (define-key org-src-mode-map [f4]
	      'python-shell-send-buffer)

	    (define-key org-src-mode-map [M-f12]
	      'org-edit-src-exit)

	    (define-key org-src-mode-map [f9]
	      (lambda ()
		(interactive)
		(org-previous-block)
		(org-show-block-all)))


	    ))


(add-hook 'sh-mode-hook
	  (lambda()

	    (define-key sh-mode-map [f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region)
		))


	    (define-key sh-mode-map [S-f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region t)
		))

	    ;; (define-key sh-mode-map [f12]
	    ;;   (lambda ()
	    ;;     (interactive)
	    ;;     (let (b)
	    ;;       (setq b (get-buffer (current-buffer)))
	    ;;       (sh-send-line-or-region-and-step)
	    ;;       (goto-char (point-max))
	    ;;       (switch-to-buffer-other-window b)
	    ;;     )))


	    ;; (define-key sh-mode-map [S-f12]
	    ;;   (lambda ()
	    ;;     (interactive)
	    ;;     (let (b)
	    ;;       (setq b (get-buffer (current-buffer)))
	    ;;       (sh-send-line-or-region-and-step)
	    ;;       (goto-char (point-max))
	    ;;       (switch-to-buffer-other-window b)
	    ;;       (next-line)
	    ;;       (end-of-line))))

	    ))


;; Piggybacking on sh-mode to send to spark-shell.
(add-hook 'scala-mode-hook
	  (lambda()

	    (define-key scala-mode-map [f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region)
		))


	    (define-key scala-mode-map [S-f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region t)
		))

	    ))


(defun my/eval-line (mode-specific-eval)
  "Send entire current line to sh, elisp, python or whatever."
  (let ((start (line-beginning-position))
	(end (line-end-position)))
    (funcall mode-specific-eval start end)))


(add-hook 'python-mode-hook
	  (lambda()

	    (define-key python-mode-map [f12]
	      (lambda ()
		(interactive)
		(my/eval-line 'python-shell-send-region)))

	    (define-key python-mode-map [S-f12]
	      (lambda ()
		(interactive)
		(my/eval-line 'python-shell-send-region)
		(next-line)
		(end-of-line)))


	    ;; Sometimes this is useful, like over ssh to BARE.
	    (define-key python-mode-map [f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region)
		))


	    (define-key python-mode-map [S-f12]
	      (lambda ()
		(interactive)
		(my/sh-send-line-or-region t)
		))


	    ))


(add-hook 'emacs-lisp-mode-hook
	  (lambda()

	    (define-key emacs-lisp-mode-map [f12]
	      (lambda ()
		(interactive)
		(my/eval-line 'eval-region)))

	    ))



  ;; Cool things in term mode.
  ;;
  ;; ‘C-c C-l’
  ;; ‘C-c C-o’


  ;;;;
  ;;
  ;; Examples.
  ;;
  ;; From Info, examples of ways to set global keys:
  ;;
  ;; (global-set-key (kbd "C-c y") 'clipboard-yank)
  ;; (global-set-key (kbd "C-M-q") 'query-replace)
  ;; (global-set-key (kbd "<f5>") 'flyspell-mode)
  ;; (global-set-key (kbd "C-<f5>") 'linum-mode)
  ;; (global-set-key (kbd "C-<right>") 'forward-sentence)
  ;; (global-set-key (kbd "<mouse-2>") 'mouse-save-then-kill)

  ;; (global-set-key "\C-x\M-l" 'make-symbolic-link)

  ;; <TAB>
  ;; (global-set-key "\C-x\t" 'indent-rigidly)

  ;; (global-set-key [?\C-=] 'make-symbolic-link)
  ;; (global-set-key [?\M-\C-=] 'make-symbolic-link)
  ;; (global-set-key [?\H-a] 'make-symbolic-link)
  ;; (global-set-key [f7] 'make-symbolic-link)
  ;; (global-set-key [C-mouse-1] 'make-symbolic-link)

  ;; (global-set-key [?\C-z ?\M-l] 'make-symbolic-link)
#+END_SRC

#+RESULTS:
| (lambda nil (define-key emacs-lisp-mode-map [f12] (lambda nil (interactive) (my/eval-line (quote eval-region))))) | (lambda nil (define-key emacs-lisp-mode-map [f12] (function (lambda nil (interactive) (my/eval-line (quote eval-region)))))) | lisp-outline-setup | (lambda nil (lispy-mode) (eldoc-mode)) | ac-emacs-lisp-mode-setup | aggressive-indent-mode |

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of my key bindings!")
#+END_SRC
* SSH, tramp

#+BEGIN_SRC emacs-lisp :tangle yes
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory "~/tmp/tramp/")
(setq tramp-chunksize 2000)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * SSH, tramp!")
#+END_SRC
* Confluence (corpwiki)

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ox-confluence)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * Confluence (corpwiki)!")
#+END_SRC
* Other useful packages

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package sr-speedbar)
(require 'sr-speedbar)

;; On Mac, -R does not work.
;; (setq projectile-tags-command "ctags -Re -f \"%s\" %s")  ;; original
;; brew install ctags
(when (eq is-mac t)
  (setq projectile-tags-command "/usr/local/Cellar/ctags/5.8_1/bin/ctags -Re -f \"%s\" %s"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * Other useful packages!")
#+END_SRC
* keymap

#+BEGIN_SRC emacs-lisp :tangle yes
;; http://irreal.org/blog/?p=1450
;; http://irreal.org/blog/?p=6645
;; Make Mac fn key the hyper H- modifier key.
(when (eq is-mac t)
  (setq ns-function-modifier 'hyper))

(require 'scimax-hydra)  ;; OH..MY..GOODNESS...

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * keymap!")
#+END_SRC
* org settings
Remove this stuff from html publish:
#+BEGIN_SRC
Author: Ryan Woodard
Created: 2017-12-21 Thu 16:46
Validate
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-export-html-postamble nil)
#+END_SRC

#+RESULTS:

Allow inline image resizing within org doc:

#+BEGIN_EXAMPLE
#+ATTR_ORG: :width 30%
[[file:static/IMG_20171212_134953.jpg]]
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-image-actual-width nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * org settings!")
#+END_SRC

** org related macros

#+BEGIN_SRC emacs-lisp :tangle yes
;; publish as html file
(fset 'my/export-as-html-file
   "\C-c\C-ehh")


(define-key org-mode-map [f12]
  (lambda ()
    (interactive)
    (org-fill-paragraph)
    (save-buffer)
    (org-html-export-to-html)))



#+END_SRC

* Local dictionary files, paths

#+BEGIN_SRC emacs-lisp :tangle yes
(when (eq is-mac t)

  (setenv
   "DICPATH"
   (concat (getenv "HOME") "/Library/Spelling")))

;; (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)
;;      '(("en_US" (concat (getenv "HOME") "/Library/Spelling/en_US.aff"))))

(setq ispell-hunspell-dict-paths-alist
      '(("en_US" "/Users/rwoodard/Library/Spelling/en_US.aff")))
	;; ("ru_RU" "C:/cygwin64/usr/share/myspell/ru_RU.aff")
	;; ("uk_UA" "C:/cygwin64/usr/share/myspell/uk_UA.aff")
	;; ("en_GB" "C:/cygwin64/usr/share/myspell/en_GB.aff")))
#+END_SRC

#+RESULTS:
| en_US | /Users/rwoodard/Library/Spelling/en_US.aff |

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * Local dictionary files, paths!")
#+END_SRC
* COMMENT Finalize theme

#+BEGIN_SRC emacs-lisp :tangle yes
;; (load-theme 'misterioso)
;; (load-theme 'wombat)
;; (load-theme 'zenburn)

;;(expand-file-name "emacs.org" user-emacs-directory)
;; (add-to-list 'custom-theme-load-path
;; 	     "~/.emacs.d/elisp/scimax/user/elisp/org-beautify-theme")
;; (load-theme 'org-beautify t)
;; (setq org-beautify-theme-use-box-hack nil)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp :tangle no
;; (defface org-block-emacs-lisp
;;   `((t (:background "red")))
;;   "Face for elisp src blocks")
(setq org-src-fontify-natively t)
(insert (face-attribute 'default :background))
;; #242424
;;  (insert (face-attribute 'org-block-emacs-lisp :background))
;; LightCyan1
;;  (insert (face-attribute 'org-block-ipython :background))
;; thistle1
;;  (insert (face-attribute 'org-block-begin-line :background))
;; #E2E1D5

(custom-set-faces
 '(org-block-emacs-lisp ((t (:background "#E2E1D5"))))
 '(org-block-ipython ((t (:background "#2d3743#2d3743"))))
 )

(insert (face-attribute 'org-block-begin-line :background))
#E2E1D5
(insert (face-attribute 'org-block-begin-line :foreground))
#555555
(custom-set-faces
 '(org-special-keyword ((t (:background "#E2E1D5" :foreground "#555555" :weight normal))))
 '(org-meta-line ((t (:background "#E2E1D5" :foreground "#555555" :weight normal))))
)

;; Fontify the whole line for headings (with a background color).
(setq org-fontify-whole-heading-line t)


;;   '(org-block-emacs-lisp ((t (:background "#2d3743")))))
;;   '(org-block-emacs-lisp ((t (:background "#2d3440")))))

;; (custom-set-faces
;;    ;;'(org-block-emacs-lisp ((t (:background myfoo1))))
;;    '(org-block-emacs-lisp ((t (:inherit (background default)))))
;;    ;;'(org-block-ipython ((t (:background "#073642"))))
;;    '(org-block-ipython ((t (:inherit (background default)))))
;;    )

;; (defface org-block-python
;;   `((t (:background "DarkSeaGreen1")))
;;   "Face for python blocks")

;; (defface org-block-ipython
;;   `((t (:background "thistle1")))
;;   "Face for python blocks") 

;; (defface org-block-jupyter-hy
;;   `((t (:background "light goldenrod yellow")))
;;   "Face for hylang blocks")

;; (defface org-block-sh
;;   `((t (:background "gray90")))
;;   "Face for python blocks")

#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp :tangle no
(defun org-fontify-drawers (limit)
  "Fontify drawers.

   Crazy function from main vc version of org.el but slight tweak
   to make drawers line go all the way across screen!  Most
   understanding of what to tweak came from
   org-fontify-meta-lines-and-blocks-1."
  
  (when (re-search-forward org-drawer-regexp limit t)

    (message (match-string 0))  ;; just to show the name of drawer in *MESSAGES*
    
    (let ((beg (match-beginning 0))
	  (beg1 (line-beginning-position 2)))  ;; needed for crux move
      
      (add-text-properties
       (match-beginning 0) (match-end 0)
       '(font-lock-fontified t face org-special-keyword))
      (add-text-properties beg beg1 '(face org-meta-line))  ;; crux move
      (org-remove-flyspell-overlays-in (match-beginning 0) (match-end 0))
      t)))


(defun org-fontify-meta-lines-and-blocks-1 (limit)
  "Fontify #+ lines and blocks.

   stolen from scimax-org.el and modified to fontify #+NAME: and #+RESULTS: lines."
  
  (let ((case-fold-search t))
    (if (re-search-forward
	 "^\\([ \t]*#\\(\\(\\+[a-zA-Z]+:?\\| \\|$\\)\\(_\\([a-zA-Z]+\\)\\)?\\)[ \t]*\\(\\([^ \t\n]*\\)[ \t]*\\(.*\\)\\)\\)"
	 limit t)
	(let ((beg (match-beginning 0))
	      (block-start (match-end 0))
	      (block-end nil)
	      (lang (match-string 7))
	      (beg1 (line-beginning-position 2))
	      (dc1 (downcase (match-string 2)))
	      (dc3 (downcase (match-string 3)))
	      end end1 quoting block-type ovl)
	  (cond
	   ((and (match-end 4) (equal dc3 "+begin"))
	    ;; Truly a block
	    (setq block-type (downcase (match-string 5))
		  quoting (member block-type org-protecting-blocks))
	    (when (re-search-forward
		   (concat "^[ \t]*#\\+end" (match-string 4) "\\>.*")
		   nil t) ;; on purpose, we look further than LIMIT
	      (setq end (min (point-max) (match-end 0))
		    end1 (min (point-max) (1- (match-beginning 0))))
	      (setq block-end (match-beginning 0))
	      (when quoting
		(org-remove-flyspell-overlays-in beg1 end1)
		(remove-text-properties beg end
					'(display t invisible t intangible t)))
	      (add-text-properties
	       beg end '(font-lock-fontified t font-lock-multiline t))
	      (add-text-properties beg beg1 '(face org-meta-line))
	      (org-remove-flyspell-overlays-in beg beg1)
	      (add-text-properties	; For end_src
	       end1 (min (point-max) (1+ end)) '(face org-meta-line))
	      (org-remove-flyspell-overlays-in end1 end)
	      (cond
	       ((and lang (not (string= lang "")) org-src-fontify-natively)
		(org-src-font-lock-fontify-block lang block-start block-end)
		(add-text-properties beg1 block-end (list 'src-block t 'lang (substring-no-properties lang))))
	       (quoting
		(add-text-properties beg1 (min (point-max) (1+ end1))
				     (let ((face-name (intern (format "org-block-%s" lang))))
				       (append (and (facep face-name) (list face-name))
					       '(face org-block))))) ; end of source block
	       ((not org-fontify-quote-and-verse-blocks))
	       ((string= block-type "quote")
		(add-text-properties beg1 (min (point-max) (1+ end1)) '(face org-quote)))
	       ((string= block-type "verse")
		(add-text-properties beg1 (min (point-max) (1+ end1)) '(face org-verse))))
	      (add-text-properties beg beg1 '(face org-block-begin-line))
	      (add-text-properties (min (point-max) (1+ end)) (min (point-max) (1+ end1))
				   '(face org-block-end-line))
	      t))
	   ((member dc1 '("+title:" "+author:" "+email:" "+date:"))
	    (org-remove-flyspell-overlays-in
	     (match-beginning 0)
	     (if (equal "+title:" dc1) (match-end 2) (match-end 0)))
	    (add-text-properties
	     beg (match-end 3)
	     (if (member (intern (substring dc1 1 -1)) org-hidden-keywords)
		 '(font-lock-fontified t invisible t)
	       '(font-lock-fontified t face org-document-info-keyword)))
	    (add-text-properties
	     (match-beginning 6) (min (point-max) (1+ (match-end 6)))
	     (if (string-equal dc1 "+title:")
		 '(font-lock-fontified t face org-document-title)
	       '(font-lock-fontified t face org-document-info))))

	   ((equal dc1 "+caption:")
	    (org-remove-flyspell-overlays-in (match-end 2) (match-end 0))
	    (remove-text-properties (match-beginning 0) (match-end 0)
				    '(display t invisible t intangible t))
	    (add-text-properties (match-beginning 1) (match-end 3)
				 '(font-lock-fontified t face org-meta-line))
	    (add-text-properties (match-beginning 6) (+ (match-end 6) 1)
				 '(font-lock-fontified t face org-block))
	    t)

	   ;; Copied and modified version of original "+caption:" block above.
	   ((equal dc1 "+results:")
	    (org-remove-flyspell-overlays-in (match-end 2) (match-end 0))
	    (remove-text-properties (match-beginning 0) (match-end 0)
				    '(display t invisible t intangible t))
	    (add-text-properties (match-beginning 1) (match-end 3)
				 '(font-lock-fontified t face org-meta-line))
	    (add-text-properties (- (match-beginning 6) 1) (+ (match-end 6) 1)
				 '(font-lock-fontified t face org-meta-line))
	    t)

	   ;; Copied and modified version of original "+caption:" block above.
	   ((equal dc1 "+name:")
	    (org-remove-flyspell-overlays-in (match-end 2) (match-end 0))
	    (remove-text-properties (match-beginning 0) (match-end 0)
				    '(display t invisible t intangible t))
	    (add-text-properties (match-beginning 1) (match-end 3)
				 '(font-lock-fontified t face org-meta-line))
	    (add-text-properties (- (match-beginning 6) 1) (+ (match-end 6) 1)
				 '(font-lock-fontified t face org-meta-line))
	    t)

	   
	   ((member dc3 '(" " ""))
	    (org-remove-flyspell-overlays-in beg (match-end 0))
	    (add-text-properties
	     beg (match-end 0)
	     '(font-lock-fontified t face font-lock-comment-face)))
	   (t ;; just any other in-buffer setting, but not indented
	    (org-remove-flyspell-overlays-in (match-beginning 0) (match-end 0))
	    (remove-text-properties (match-beginning 0) (match-end 0)
				    '(display t invisible t intangible t))
	    (add-text-properties beg (match-end 0)
				 '(font-lock-fontified t face org-meta-line))
	    t))))))

#+END_SRC

#+RESULTS:
: org-fontify-meta-lines-and-blocks-1

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * COMMENT Finalize theme!")
#+END_SRC
* Python, Jupyter, et al
** Connect to jupyter kernel started in Emacs from terminal
#+BEGIN_SRC sh :tangle no
jupyter console --existing
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(fset 'my/insert-ipy-block-below
   [?\C-u ?\M-x ?o ?r ?g ?  ?b ?a ?b ?e ?l ?  ?i ?n ?s ?e ?r ?t ?  ?b ?l ?o ?c ?k return])
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of * Python, Jupyter, et al!")
#+END_SRC
* Message to show I reached end of this file

#+BEGIN_SRC emacs-lisp :tangle yes
(message "Reached end of ryan_after_scimax.org!")
#+END_SRC
